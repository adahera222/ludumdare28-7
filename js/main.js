// Generated by CoffeeScript 1.6.3
var Game, GameState, OverworldState, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameState = (function() {
  function GameState(cq, assetManager) {
    this.cq = cq;
    this.assetManager = assetManager;
    this.eventManager = new EventManager();
    this.entityManager = new EntityManager(window.components);
    this.create();
  }

  GameState.prototype.start = function() {
    var _this = this;
    return this.cq.framework({
      onstep: function(delta, time) {
        return _this.step(delta, time);
      },
      onrender: function(delta, time) {
        return _this.render(delta, time);
      },
      onkeydown: function(key) {
        return _this.keyDown(key);
      },
      onkeyup: function(key) {
        return _this.keyUp(key);
      }
    });
  };

  GameState.prototype.loadAssets = function() {};

  GameState.prototype.create = function() {};

  GameState.prototype.step = function(delta, time) {};

  GameState.prototype.render = function(delta, time) {};

  GameState.prototype.keyUp = function(key) {};

  GameState.prototype.keyDown = function(key) {};

  return GameState;

})();

OverworldState = (function(_super) {
  __extends(OverworldState, _super);

  function OverworldState() {
    _ref = OverworldState.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  OverworldState.prototype.create = function() {
    var acorn, background, backgroundLayer, camera, col, collision, collisionLayer, idx, mapData, objects, objectsLayer, player, row, tile, _i, _len, _ref1;
    col = 5;
    row = 5;
    player = this.entityManager.createEntityWithComponents([
      ['PlayerComponent', {}], [
        'GridPositionComponent', {
          col: col,
          row: row,
          gridSize: Game.GRID_SIZE
        }
      ], [
        'PixelPositionComponent', {
          x: col * Game.GRID_SIZE,
          y: row * Game.GRID_SIZE
        }
      ], [
        'DirectionComponent', {
          direction: 'right'
        }
      ], ['ActionInputComponent', {}], ['KeyboardArrowsInputComponent', {}], [
        'ColorComponent', {
          color: 'red'
        }
      ], [
        'GridMovementComponent', {
          speed: 0.4
        }
      ], ['CollidableComponent', {}], ['CameraFollowsComponent', {}], [
        'AnimationComponent', {
          currentAction: 'idle-right',
          spritesheetUrl: 'squirrel.png',
          frameWidth: 112,
          frameHeight: 112,
          offsetX: 24,
          offsetY: 48
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-right',
          row: 0,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-left',
          row: 1,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-down',
          row: 2,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-up',
          row: 3,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-right',
          row: 0,
          indices: [0, 0, 0, 1, 2, 2, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-left',
          row: 1,
          indices: [0, 0, 0, 1, 2, 2, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-down',
          row: 2,
          indices: [0, 0, 0, 1, 2, 2, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-up',
          row: 3,
          indices: [0, 0, 0, 1, 2, 2, 2, 1],
          frameLength: 50
        }
      ]
    ]);
    camera = this.entityManager.createEntityWithComponents([
      ['CameraComponent', {}], [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ]
    ]);
    mapData = this.assetManager.assets['sad-forest.json'];
    background = mapData.layers[0];
    objects = mapData.layers[1];
    collision = mapData.layers[2];
    backgroundLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapVisibleLayerComponent', {
          tileData: background,
          tileImageUrl: 'tiles.png',
          tileWidth: 64,
          tileHeight: 64,
          zIndex: 0
        }
      ]
    ]);
    objectsLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapVisibleLayerComponent', {
          tileData: objects,
          tileImageUrl: 'tiles.png',
          tileWidth: 64,
          tileHeight: 64,
          zIndex: 1
        }
      ]
    ]);
    collisionLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapCollisionLayerComponent', {
          tileData: objects
        }
      ]
    ]);
    _ref1 = objects.data;
    for (idx = _i = 0, _len = _ref1.length; _i < _len; idx = ++_i) {
      tile = _ref1[idx];
      if (tile === 0) {
        col = idx % objects.width;
        row = Math.floor(idx / objects.width);
        acorn = this.entityManager.createEntityWithComponents([
          [
            'PixelPositionComponent', {
              x: col * Game.GRID_SIZE,
              y: row * Game.GRID_SIZE
            }
          ], [
            'GridPositionComponent', {
              col: col,
              row: row,
              gridSize: Game.GRID_SIZE
            }
          ], ['PickUpAbleComponent', {}], [
            'StaticSpriteComponent', {
              spriteUrl: 'acorn.png'
            }
          ], [
            'EyeHavingComponent', {
              offsetMax: 4,
              targetEntity: player,
              eyesImageUrl: 'acorn-eyes.png'
            }
          ]
        ]);
      }
    }
    this.gridMovementSystem = new GridMovementSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tweenSystem = new TweenSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.shapeRenderSystem = new ShapeRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.inputSystem = new InputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.cameraFollowingSystem = new CameraFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.randomInputSystem = new RandomInputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tilemapRenderingSystem = new TilemapRenderingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animationDirectionSyncSystem = new AnimationDirectionSyncSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animatedSpriteSystem = new AnimatedSpriteSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.staticSpriteRenderSystem = new StaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    return this.eyeFollowingSystem = new EyeFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
  };

  OverworldState.prototype.step = function(delta, time) {
    this.gridMovementSystem.update(delta, time);
    this.tweenSystem.update(delta, time);
    this.randomInputSystem.update(delta, time);
    this.animatedSpriteSystem.update(delta, time);
    this.animationDirectionSyncSystem.update(delta, time);
    return this.cameraFollowingSystem.update(delta, time);
  };

  OverworldState.prototype.render = function(delta, time) {
    this.cq.clear('white');
    this.tilemapRenderingSystem.draw();
    this.shapeRenderSystem.draw();
    this.staticSpriteRenderSystem.draw();
    this.eyeFollowingSystem.draw();
    return this.animatedSpriteSystem.draw();
  };

  OverworldState.prototype.keyUp = function(key) {
    return this.inputSystem.updateKey(key, false);
  };

  OverworldState.prototype.keyDown = function(key) {
    return this.inputSystem.updateKey(key, true);
  };

  return OverworldState;

})(GameState);

Game = (function() {
  Game.SCREEN_WIDTH = 640;

  Game.SCREEN_HEIGHT = 576;

  Game.GRID_SIZE = 64;

  function Game() {
    var _this = this;
    this.states = [];
    this.cq = cq(Game.SCREEN_WIDTH, Game.SCREEN_HEIGHT).appendTo('body');
    this.assetManager = new AssetManager();
    this.assetManager.loadImage('tiles.png');
    this.assetManager.loadImage('squirrel.png');
    this.assetManager.loadImage('acorn.png');
    this.assetManager.loadImage('acorn-eyes.png');
    this.assetManager.loadTilemap('sad-forest.json');
    this.assetManager.start(function() {
      _this.states.push(new OverworldState(_this.cq, _this.assetManager));
      return _this.states[0].start();
    });
  }

  Game.prototype.pushState = function(state) {
    return this.states.push(state);
  };

  Game.prototype.popState = function() {
    return this.states.pop();
  };

  return Game;

})();

window.game = new Game();
