// Generated by CoffeeScript 1.6.3
var Game, GameState, OverworldState, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameState = (function() {
  function GameState(cq, assetManager) {
    this.cq = cq;
    this.assetManager = assetManager;
    this.eventManager = new EventManager();
    this.entityManager = new EntityManager(window.components);
    this.create();
  }

  GameState.prototype.start = function() {
    var _this = this;
    return this.cq.framework({
      onstep: function(delta, time) {
        return _this.step(delta, time);
      },
      onrender: function(delta, time) {
        return _this.render(delta, time);
      },
      onkeydown: function(key) {
        return _this.keyDown(key);
      },
      onkeyup: function(key) {
        return _this.keyUp(key);
      }
    });
  };

  GameState.prototype.loadAssets = function() {};

  GameState.prototype.create = function() {};

  GameState.prototype.step = function(delta, time) {};

  GameState.prototype.render = function(delta, time) {};

  GameState.prototype.keyUp = function(key) {};

  GameState.prototype.keyDown = function(key) {};

  return GameState;

})();

OverworldState = (function(_super) {
  __extends(OverworldState, _super);

  function OverworldState() {
    _ref = OverworldState.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  OverworldState.prototype.create = function() {
    var camera, col, player, row, scoreEntity;
    col = 5;
    row = 5;
    player = this.entityManager.createEntityWithComponents([
      ['PlayerComponent', {}], [
        'GridPositionComponent', {
          col: col,
          row: row,
          gridSize: Game.GRID_SIZE
        }
      ], [
        'PixelPositionComponent', {
          x: col * Game.GRID_SIZE,
          y: row * Game.GRID_SIZE
        }
      ], [
        'DirectionComponent', {
          direction: 'right'
        }
      ], ['ActionInputComponent', {}], ['KeyboardArrowsInputComponent', {}], [
        'ColorComponent', {
          color: 'red'
        }
      ], [
        'GridMovementComponent', {
          speed: 0.4
        }
      ], ['CollidableComponent', {}], [
        'AnimationComponent', {
          currentAction: 'idle-right',
          spritesheetUrl: 'squirrel.png',
          frameWidth: 112,
          frameHeight: 112,
          offsetX: 24,
          offsetY: 48
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-right',
          row: 0,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-left',
          row: 1,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-down',
          row: 2,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-up',
          row: 3,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-right',
          row: 0,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-left',
          row: 1,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-down',
          row: 2,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-up',
          row: 3,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], ['CameraFollowsComponent', {}]
    ]);
    camera = this.entityManager.createEntityWithComponents([
      ['CameraComponent', {}], [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ]
    ]);
    scoreEntity = this.entityManager.createEntityWithComponents([
      [
        'ScoreComponent', {
          score: 0
        }
      ], [
        'AcornsLeftComponent', {
          amount: 0
        }
      ], [
        'LivesComponent', {
          lives: 3
        }
      ]
    ]);
    this.loadLevel('level1.json');
    this.gridMovementSystem = new GridMovementSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tweenSystem = new TweenSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.shapeRenderSystem = new ShapeRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.inputSystem = new InputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.cameraFollowingSystem = new CameraFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.randomInputSystem = new RandomInputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tilemapRenderingSystem = new TilemapRenderingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animationDirectionSyncSystem = new AnimationDirectionSyncSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animatedSpriteSystem = new AnimatedSpriteSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.staticSpriteRenderSystem = new StaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.eyeFollowingSystem = new EyeFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.acornSystem = new AcornSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.astarInputSystem = new AstarInputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    return this.scoreRenderingSystem = new ScoreRenderingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
  };

  OverworldState.prototype.loadLevel = function(tileDataUrl) {
    var acorn, acornsLeft, background, backgroundLayer, col, collisionEntity, collisionLayer, dog, entity, fireEnemy, idx, layerEntity, mapData, noop, objects, objectsLayer, oldLayers, player, playerGridPosition, playerPixelPosition, row, tile, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    oldLayers = [];
    _ref1 = this.entityManager.iterateEntitiesAndComponents(['TilemapVisibleLayerComponent']);
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      _ref2 = _ref1[_i], layerEntity = _ref2[0], noop = _ref2[1];
      oldLayers.push(layerEntity);
    }
    _ref3 = this.entityManager.iterateEntitiesAndComponents(['TilemapCollisionLayerComponent']);
    for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
      _ref4 = _ref3[_j], collisionEntity = _ref4[0], noop = _ref4[1];
      oldLayers.push(collisionEntity);
    }
    for (_k = 0, _len2 = oldLayers.length; _k < _len2; _k++) {
      entity = oldLayers[_k];
      this.entityManager.removeEntity(entity);
    }
    mapData = this.assetManager.assets[tileDataUrl];
    background = mapData.layers[0];
    objects = mapData.layers[1];
    backgroundLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapVisibleLayerComponent', {
          tileData: background,
          tileImageUrl: 'tiles.png',
          tileWidth: 64,
          tileHeight: 64,
          zIndex: 0
        }
      ]
    ]);
    objectsLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapVisibleLayerComponent', {
          tileData: objects,
          tileImageUrl: 'tiles.png',
          tileWidth: 64,
          tileHeight: 64,
          zIndex: 1
        }
      ]
    ]);
    collisionLayer = this.entityManager.createEntityWithComponents([
      [
        'TilemapCollisionLayerComponent', {
          tileData: objects
        }
      ]
    ]);
    _ref5 = this.entityManager.getFirstEntityAndComponents(['PlayerComponent', 'PixelPositionComponent', 'GridPositionComponent']), player = _ref5[0], noop = _ref5[1], playerPixelPosition = _ref5[2], playerGridPosition = _ref5[3];
    playerGridPosition.col = 9;
    playerGridPosition.row = 11;
    playerPixelPosition.x = 9 * Game.GRID_SIZE;
    playerPixelPosition.y = 11 * Game.GRID_SIZE;
    _ref6 = this.entityManager.getFirstEntityAndComponents(['AcornsLeftComponent']), noop = _ref6[0], acornsLeft = _ref6[1];
    acornsLeft.amount = 0;
    _ref7 = objects.data;
    for (idx = _l = 0, _len3 = _ref7.length; _l < _len3; idx = ++_l) {
      tile = _ref7[idx];
      if (tile === 0) {
        col = idx % objects.width;
        row = Math.floor(idx / objects.width);
        acorn = this.entityManager.createEntityWithComponents([
          ['AcornComponent', {}], [
            'PixelPositionComponent', {
              x: col * Game.GRID_SIZE,
              y: row * Game.GRID_SIZE
            }
          ], [
            'GridPositionComponent', {
              col: col,
              row: row,
              gridSize: Game.GRID_SIZE
            }
          ], [
            'StaticSpriteComponent', {
              spriteUrl: 'acorn.png'
            }
          ], [
            'EyeHavingComponent', {
              offsetMax: 4,
              targetEntity: player,
              eyesImageUrl: 'acorn-eyes.png'
            }
          ]
        ]);
        acornsLeft.amount++;
      }
    }
    _ref8 = [[3, 3], [3, 16], [16, 3], [16, 16]];
    for (_m = 0, _len4 = _ref8.length; _m < _len4; _m++) {
      _ref9 = _ref8[_m], col = _ref9[0], row = _ref9[1];
      fireEnemy = this.entityManager.createEntityWithComponents([
        ['EnemyComponent', {}], [
          'PixelPositionComponent', {
            x: col * Game.GRID_SIZE,
            y: row * Game.GRID_SIZE
          }
        ], [
          'GridPositionComponent', {
            col: col,
            row: row,
            gridSize: Game.GRID_SIZE
          }
        ], [
          'DirectionComponent', {
            direction: 'right'
          }
        ], ['ActionInputComponent', {}], ['RandomArrowsInputComponent', {}], [
          'GridMovementComponent', {
            speed: 0.35
          }
        ], ['CollidableComponent', {}], [
          'AnimationComponent', {
            currentAction: 'idle-right',
            spritesheetUrl: 'fire.png',
            frameWidth: 64,
            frameHeight: 76,
            offsetX: 0,
            offsetY: 12
          }
        ], [
          'AnimationActionComponent', {
            name: 'idle-right',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'idle-left',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'idle-up',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'idle-down',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'walk-right',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'walk-left',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'walk-up',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ], [
          'AnimationActionComponent', {
            name: 'walk-down',
            row: 0,
            indices: [0, 1, 2, 1, 3, 3, 3, 0, 3, 2, 0, 2, 2, 1, 0, 3, 1, 3, 2, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 3, 2, 0, 2, 0, 1, 1, 3, 3, 0, 0, 1, 3, 0, 3, 0, 1, 1, 2, 0, 3],
            frameLength: 50
          }
        ]
      ]);
    }
    _ref10 = _.sample([[3, 3], [3, 16], [16, 3], [16, 16]]), col = _ref10[0], row = _ref10[1];
    return dog = this.entityManager.createEntityWithComponents([
      ['EnemyComponent', {}], [
        'GridPositionComponent', {
          col: col,
          row: row,
          gridSize: Game.GRID_SIZE
        }
      ], [
        'PixelPositionComponent', {
          x: col * Game.GRID_SIZE,
          y: row * Game.GRID_SIZE
        }
      ], [
        'DirectionComponent', {
          direction: 'right'
        }
      ], ['ActionInputComponent', {}], ['AstarInputComponent', {}], [
        'ColorComponent', {
          color: 'red'
        }
      ], [
        'GridMovementComponent', {
          speed: 0.2
        }
      ], ['CollidableComponent', {}], [
        'AnimationComponent', {
          currentAction: 'idle-right',
          spritesheetUrl: 'dog.png',
          frameWidth: 112,
          frameHeight: 112,
          offsetX: 24,
          offsetY: 48
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-right',
          row: 0,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-left',
          row: 1,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-down',
          row: 2,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-up',
          row: 3,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-right',
          row: 0,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-left',
          row: 1,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-down',
          row: 2,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-up',
          row: 3,
          indices: [0, 1, 2, 1],
          frameLength: 50
        }
      ]
    ]);
  };

  OverworldState.prototype.step = function(delta, time) {
    this.astarInputSystem.update(delta, time);
    this.gridMovementSystem.update(delta, time);
    this.tweenSystem.update(delta, time);
    this.randomInputSystem.update(delta, time);
    this.acornSystem.update(delta, time);
    this.animatedSpriteSystem.update(delta, time);
    this.animationDirectionSyncSystem.update(delta, time);
    return this.cameraFollowingSystem.update(delta, time);
  };

  OverworldState.prototype.render = function(delta, time) {
    this.cq.clear('white');
    this.tilemapRenderingSystem.draw();
    this.shapeRenderSystem.draw();
    this.staticSpriteRenderSystem.draw();
    this.eyeFollowingSystem.draw();
    this.animatedSpriteSystem.draw();
    return this.scoreRenderingSystem.draw();
  };

  OverworldState.prototype.keyUp = function(key) {
    return this.inputSystem.updateKey(key, false);
  };

  OverworldState.prototype.keyDown = function(key) {
    return this.inputSystem.updateKey(key, true);
  };

  return OverworldState;

})(GameState);

Game = (function() {
  Game.SCREEN_WIDTH = 640;

  Game.SCREEN_HEIGHT = 640;

  Game.GRID_SIZE = 64;

  function Game() {
    var _this = this;
    this.states = [];
    this.cq = cq(Game.SCREEN_WIDTH, Game.SCREEN_HEIGHT).appendTo('body');
    this.assetManager = new AssetManager();
    this.assetManager.loadImage('tiles.png');
    this.assetManager.loadImage('squirrel.png');
    this.assetManager.loadImage('acorn.png');
    this.assetManager.loadImage('acorn-eyes.png');
    this.assetManager.loadImage('fire.png');
    this.assetManager.loadImage('dog.png');
    this.assetManager.loadTilemap('level1.json');
    this.assetManager.loadTilemap('level2.json');
    this.assetManager.loadTilemap('level3.json');
    this.assetManager.loadTilemap('testlevel.json');
    this.assetManager.start(function() {
      _this.states.push(new OverworldState(_this.cq, _this.assetManager));
      return _this.states[0].start();
    });
  }

  Game.prototype.pushState = function(state) {
    return this.states.push(state);
  };

  Game.prototype.popState = function() {
    return this.states.pop();
  };

  return Game;

})();

window.game = new Game();
