// Generated by CoffeeScript 1.6.3
var Game, GameOverScreenState, GameState, PlayState, TitleScreenState, _ref, _ref1, _ref2,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

GameState = (function() {
  function GameState(cq, assetManager, args) {
    this.cq = cq;
    this.assetManager = assetManager;
    this.eventManager = new EventManager();
    this.entityManager = new EntityManager(window.components);
    this.create(args);
  }

  GameState.prototype.loadAssets = function() {};

  GameState.prototype.create = function(args) {};

  GameState.prototype.start = function() {};

  GameState.prototype.step = function(delta, time) {};

  GameState.prototype.render = function(delta, time) {};

  GameState.prototype.keyUp = function(key) {};

  GameState.prototype.keyDown = function(key) {};

  return GameState;

})();

TitleScreenState = (function(_super) {
  __extends(TitleScreenState, _super);

  function TitleScreenState() {
    _ref = TitleScreenState.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  TitleScreenState.prototype.create = function(args) {
    var background, camera;
    background = this.entityManager.createEntityWithComponents([
      [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ], [
        'StaticSpriteComponent', {
          spriteUrl: 'title-screen.png'
        }
      ]
    ]);
    camera = this.entityManager.createEntityWithComponents([
      ['CameraComponent', {}], [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ]
    ]);
    this.staticSpriteRenderSystem = new StaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    window.soundManager.stopAll();
    return window.soundManager.play('title-screen-music.ogg');
  };

  TitleScreenState.prototype.render = function(delta, time) {
    return this.staticSpriteRenderSystem.draw();
  };

  TitleScreenState.prototype.keyUp = function(key) {
    if (key === 'space') {
      window.soundManager.stopAll();
      return game.pushState(PlayState, {});
    }
  };

  return TitleScreenState;

})(GameState);

PlayState = (function(_super) {
  __extends(PlayState, _super);

  function PlayState() {
    _ref1 = PlayState.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  PlayState.prototype.create = function(args) {
    var camera, col, player, row, scoreEntity;
    col = 5;
    row = 5;
    player = this.entityManager.createEntityWithComponents([
      ['PlayerComponent', {}], [
        'GridPositionComponent', {
          col: col,
          row: row,
          gridSize: Game.GRID_SIZE
        }
      ], [
        'PixelPositionComponent', {
          x: col * Game.GRID_SIZE,
          y: row * Game.GRID_SIZE
        }
      ], [
        'DirectionComponent', {
          direction: 'right'
        }
      ], ['ActionInputComponent', {}], ['KeyboardArrowsInputComponent', {}], [
        'ColorComponent', {
          color: 'red'
        }
      ], [
        'GridMovementComponent', {
          speed: 0.4
        }
      ], ['CollidableComponent', {}], [
        'AnimationComponent', {
          currentAction: 'idle-right',
          spritesheetUrl: 'squirrel.png',
          frameWidth: 112,
          frameHeight: 112,
          offsetX: 24,
          offsetY: 48
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-right',
          row: 0,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-left',
          row: 1,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-down',
          row: 2,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'idle-up',
          row: 3,
          indices: [0],
          frameLength: 100
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-right',
          row: 0,
          indices: [0, 1, 2],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-left',
          row: 1,
          indices: [0, 1, 2],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-down',
          row: 2,
          indices: [0, 1, 2],
          frameLength: 50
        }
      ], [
        'AnimationActionComponent', {
          name: 'walk-up',
          row: 3,
          indices: [0, 1, 2],
          frameLength: 50
        }
      ], ['CameraFollowsComponent', {}]
    ]);
    camera = this.entityManager.createEntityWithComponents([
      ['CameraComponent', {}], [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ]
    ]);
    scoreEntity = this.entityManager.createEntityWithComponents([
      [
        'ScoreComponent', {
          score: 0
        }
      ], [
        'LivesComponent', {
          lives: 3
        }
      ], [
        'CurrentLevelComponent', {
          level: 0
        }
      ]
    ]);
    this.gridMovementSystem = new GridMovementSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tweenSystem = new TweenSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.shapeRenderSystem = new ShapeRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.inputSystem = new InputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.cameraFollowingSystem = new CameraFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.randomInputSystem = new RandomInputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.tilemapRenderingSystem = new TilemapRenderingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animationDirectionSyncSystem = new AnimationDirectionSyncSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.animatedSpriteSystem = new AnimatedSpriteSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.staticSpriteRenderSystem = new StaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.eyeFollowingSystem = new EyeFollowingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.acornSystem = new AcornSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.astarInputSystem = new AstarInputSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.scoreRenderingSystem = new ScoreRenderingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.enemyDamageSystem = new EnemyDamageSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.levelLoaderSystem = new LevelLoaderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.fireSpreadingSystem = new FireSpreadingSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    this.multiStateStaticSpriteRenderSystem = new MultiStateStaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    return this.eventManager.trigger('next-level', player);
  };

  PlayState.prototype.step = function(delta, time) {
    this.eventManager.pump();
    this.fireSpreadingSystem.update(delta, time);
    this.astarInputSystem.update(delta, time);
    this.gridMovementSystem.update(delta, time);
    this.tweenSystem.update(delta, time);
    this.randomInputSystem.update(delta, time);
    this.acornSystem.update(delta, time);
    this.animatedSpriteSystem.update(delta, time);
    this.animationDirectionSyncSystem.update(delta, time);
    this.cameraFollowingSystem.update(delta, time);
    return this.enemyDamageSystem.update(delta, time);
  };

  PlayState.prototype.render = function(delta, time) {
    this.cq.clear('white');
    console.log('here');
    this.tilemapRenderingSystem.draw();
    this.shapeRenderSystem.draw();
    this.staticSpriteRenderSystem.draw();
    this.multiStateStaticSpriteRenderSystem.draw();
    this.eyeFollowingSystem.draw();
    this.animatedSpriteSystem.draw();
    return this.scoreRenderingSystem.draw();
  };

  PlayState.prototype.keyUp = function(key) {
    return this.inputSystem.updateKey(key, false);
  };

  PlayState.prototype.keyDown = function(key) {
    return this.inputSystem.updateKey(key, true);
  };

  return PlayState;

})(GameState);

GameOverScreenState = (function(_super) {
  __extends(GameOverScreenState, _super);

  function GameOverScreenState() {
    _ref2 = GameOverScreenState.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  GameOverScreenState.prototype.create = function(args) {
    var background, camera;
    background = this.entityManager.createEntityWithComponents([
      [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ], [
        'StaticSpriteComponent', {
          spriteUrl: 'game-over-screen.png'
        }
      ]
    ]);
    camera = this.entityManager.createEntityWithComponents([
      ['CameraComponent', {}], [
        'PixelPositionComponent', {
          x: 0,
          y: 0
        }
      ]
    ]);
    this.score = args.finalScore;
    this.staticSpriteRenderSystem = new StaticSpriteRenderSystem(this.cq, this.entityManager, this.eventManager, this.assetManager);
    window.soundManager.stopAll();
    return window.soundManager.play('game-over-music.ogg');
  };

  GameOverScreenState.prototype.render = function(delta, time) {
    this.cq.font('102px "Merienda One"').textAlign('center').fillStyle('black');
    this.staticSpriteRenderSystem.draw();
    return this.cq.fillText(this.score, Game.SCREEN_WIDTH / 2, 194);
  };

  GameOverScreenState.prototype.keyUp = function(key) {
    if (key === 'space') {
      window.soundManager.stopAll();
      game.popState();
      game.popState();
      return game.pushState(PlayState, {});
    }
  };

  return GameOverScreenState;

})(GameState);

Game = (function() {
  Game.SCREEN_WIDTH = 640;

  Game.SCREEN_HEIGHT = 640;

  Game.GRID_SIZE = 64;

  function Game() {
    var _this = this;
    soundManager.setup({
      url: 'js/lib/soundmanager/swf/soundmanager2.swf',
      flashVersion: 9,
      waitForWindowLoad: true,
      useHighPerformance: true,
      onready: function() {
        _this.cq = cq(Game.SCREEN_WIDTH, Game.SCREEN_HEIGHT).appendTo('body');
        _this.states = [];
        _this.currentState = null;
        _this.assetManager = new AssetManager();
        _this.assetManager.loadImage('tiles.png');
        _this.assetManager.loadImage('squirrel.png');
        _this.assetManager.loadImage('acorn.png');
        _this.assetManager.loadImage('acorn-eyes.png');
        _this.assetManager.loadImage('fire.png');
        _this.assetManager.loadImage('dog.png');
        _this.assetManager.loadImage('title-screen.png');
        _this.assetManager.loadImage('game-over-screen.png');
        _this.assetManager.loadTilemap('level1.json');
        _this.assetManager.loadTilemap('level2.json');
        _this.assetManager.loadTilemap('level3.json');
        _this.assetManager.loadSoundEffect('crunch.wav');
        _this.assetManager.loadSoundEffect('nom-nom-nom.wav');
        _this.assetManager.loadSoundEffect('dog-eat.wav');
        _this.assetManager.loadBGM('title-screen-music.ogg');
        _this.assetManager.loadBGM('game-over-music.ogg');
        return _this.assetManager.start(function() {
          _this.pushState(TitleScreenState);
          return _this.cq.framework({
            onstep: function(delta, time) {
              if (_this.currentState) {
                return _this.currentState.step(delta, time);
              }
            },
            onrender: function(delta, time) {
              if (_this.currentState) {
                return _this.currentState.render(delta, time);
              }
            },
            onkeydown: function(key) {
              if (_this.currentState) {
                return _this.currentState.keyDown(key);
              }
            },
            onkeyup: function(key) {
              if (_this.currentState) {
                return _this.currentState.keyUp(key);
              }
            }
          });
        });
      }
    });
  }

  Game.prototype.pushState = function(stateClass, args) {
    var state;
    state = new stateClass(this.cq, this.assetManager, args);
    this.states.push(state);
    this.currentState = state;
    return state.start(args);
  };

  Game.prototype.popState = function(args) {
    var prevState;
    if (this.states.length > 1) {
      this.states.pop();
      prevState = this.states[this.states.length - 1];
      this.currentState = prevState;
      return prevState.start(args);
    } else {
      throw "Can't pop last state!";
    }
  };

  return Game;

})();

window.game = new Game();
