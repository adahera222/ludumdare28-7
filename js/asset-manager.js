// Generated by CoffeeScript 1.6.3
var AssetManager;

AssetManager = (function() {
  function AssetManager() {
    this.imagesPrefix = 'images/';
    this.tilemapsPrefix = 'levels/';
    this.audiosPrefix = 'audio/';
    this.imagesToLoad = [];
    this.tilemapsToLoad = [];
    this.soundEffectsToLoad = [];
    this.bgmsToLoad = [];
    this.assets = {};
    this.remaining = 0;
  }

  AssetManager.prototype.loadImage = function(url) {
    return this.imagesToLoad.push(url);
  };

  AssetManager.prototype.loadTilemap = function(url) {
    return this.tilemapsToLoad.push(url);
  };

  AssetManager.prototype.loadSoundEffect = function(url) {
    return this.soundEffectsToLoad.push(url);
  };

  AssetManager.prototype.loadBGM = function(url) {
    return this.bgmsToLoad.push(url);
  };

  AssetManager.prototype.start = function(callback) {
    var bgmUrl, img, imgUrl, soundEffectUrl, tilemapUrl, _fn, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3,
      _this = this;
    _ref = this.tilemapsToLoad;
    _fn = function(tilemapUrl) {
      var xhr;
      xhr = new XMLHttpRequest();
      xhr.open('GET', _this.tilemapsPrefix + tilemapUrl, true);
      xhr.url = tilemapUrl;
      _this.remaining++;
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          _this.assets[xhr.url] = JSON.parse(xhr.response);
          _this.remaining--;
          if (_this.remaining === 0) {
            return callback();
          }
        }
      };
      return xhr.send();
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tilemapUrl = _ref[_i];
      _fn(tilemapUrl);
    }
    _ref1 = this.imagesToLoad;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      imgUrl = _ref1[_j];
      img = new Image();
      img.src = this.imagesPrefix + imgUrl;
      this.remaining++;
      img.onload = function() {
        console.log('loaded image');
        _this.remaining--;
        if (_this.remaining === 0) {
          return callback();
        }
      };
      this.assets[imgUrl] = img;
    }
    _ref2 = this.bgmsToLoad;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      bgmUrl = _ref2[_k];
      this.remaining++;
      window.soundManager.createSound({
        volume: 100,
        autoLoad: true,
        loops: 10000,
        id: bgmUrl,
        url: this.audiosPrefix + bgmUrl,
        onload: function() {
          console.log('loaded audio');
          _this.remaining--;
          if (_this.remaining === 0) {
            return callback();
          }
        }
      });
    }
    _ref3 = this.soundEffectsToLoad;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      soundEffectUrl = _ref3[_l];
      this.remaining++;
      window.soundManager.createSound({
        volume: 100,
        autoLoad: true,
        multiShot: true,
        id: soundEffectUrl,
        url: this.audiosPrefix + soundEffectUrl,
        onload: function() {
          console.log('loaded audio');
          _this.remaining--;
          if (_this.remaining === 0) {
            return callback();
          }
        }
      });
    }
    if (Object.keys(this.assets).length === 0) {
      return callback();
    }
  };

  return AssetManager;

})();
